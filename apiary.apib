FORMAT: 1A
HOST: http://localhost:3000/aggie/v1/


# TV Dashboard
TV dashboard API provides access to personalized tv content recommendation data.
Data provided by this API is normally presented in form of rows. Row, Content and 
VoD category are main entities at recommendation dashboard API model. Row provides 
organization to contents and is an actual presentation container of various types
as VoD content, TV show, TV series.
API is RESTfull by design, featuring lower complexity by pre-aggregating results, 
lower request count for consuming applications and overall programming convenance. 
That comes with price of having user scope methods with quick response times 
required. 


## Method call model
API isn't too chatty because of preloading required to achieve UI snappiness.
#### 
1. Level: fetch immediate data; when module starts.
 - Row; complete hierarchy.
 - Content; first page for all rows (except for low mem. devices).
 - Bitmap images; first page for all rows.
 - Profile data; any.
2. Level: on demand data fetch; after initial data fetched and UI was generated.
 - Next page results.
 - Content details.
 - Content ratings, likes, favorites.
 - Next content in series.
 - Search results.
 - Playback data fetch (such as recordings from OA, make recordings, media info
   from OA).

## Application caching
Applications are not expected to cache 2. level requests locally due to memory 
constraints which isn't true for 1. level reuests. 

## Users recommendation profile [/{userId}/tvdashboard/profile]
+ Parameters
    + userId: `1` (string)
    
### Get users recommendation profile [GET]
Returns user configuration specific to TV recommendation dashboard.

+ Response 200 (application/json)

        {
            "recommendationPersonalized": true,
            "isDashboardDefaultScreen": true,
            "recommendationExplanation": true
        }
        
+ Response 400 (application/json)

        {
            "error": "userid-does-not-exist",
            "message": "Desired user does not exist."
        } 
        
## Change users recommendation profile [/{userId}/tvdashboard/profile{?recommendationPersonalized,isDashboardDefaultScreen,recommendationExplanation}]

+ Parameters
    + userId: `1` (string) 
    + recommendationPersonalized: `false` (boolean) - (Optional) Defaults to false.
    + isDashboardDefaultScreen: `false` (boolean) - (Optional) Defaults to false.
    + recommendationExplanation: `true` (boolean) - (Optional) Defaults to true.
    
### Change users recommendation profile [GET]
Unspecified parameter doesn't change anything.

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 400 (application/json)

        {
            "error": "userid-does-not-exist",
            "message": "Desired user does not exist."
        } 
        
+ Response 400 (application/json)

        {
            "error": "bad-arguments",
            "message": "Some property must be specified and value must be supported."
        } 
        
## Recommendation consent message [/{userId}/tvdashboard/consent{?language}]
+ Parameters
    + userId: `1` (string)
    + language: `en` (string) - (Optional) Defaults to `en`.
    
### Get message for users consent on private recommendation data usage [GET]
    
+ Response 200 (application/json)

        {
            "message": "Consent text here" 
        }


## Rows [/{userId}/tvdashboard/rows{?language}]
+ Parameters
    + language: `en` (string) - (Optional) Defaults to `en`.

### List all Rows [GET]
Rows are returned completely in single response as data complexity is low and clients 
are expected to store them in same manner. Tag is unique identifier of categories then 
used for content fetching. Recommendation rank is denoted by order. First presented 
first in response. Titles are translated to English by default. 
NOTE on object reconstruction: 2 entities are delivered here that inherits from same
ancestor Content;
- Rows are denoted by type=contents.
- Categories are denoted by lack of type field. Leaf categories have no list field.

+ Response 200 (application/json)

        [
            {
              "id": "for-me",
              "title": "For me"
            },
            {
              "id": "my-content",
              "title": "My Content"
            },
            {
              "id": "comedy",
              "title": "Comedy"
            },
            {
              "id": "action",
              "title": "Action"
            },
            {
              "id": "categories",
              "title": "Categories",
              "list": [
                {
                    "id": "popular",
                    "title": "Popular",
                    "color": "#aa00cc"
                },
                {
                    "id": "scifi",
                    "title": "Drama",
                    "color": "#aa11cc"
                    "list": [
                        {
                            "id": "pero-dislikes",
                            "title": "Pero dislikes",
                            "color": "#aabb00"
                        },
                        {
                            "id": "pero-dislikes-even-more",
                            "title": "Pero dislikes even more",
                            "color": "#aabb11"
                        }
                    ]
                },
                {
                    "id": "cartoons",
                    "title": "Cartoons",
                    "color": "#aacc00"
                }                
              ]
            }
        ]

## Row's list of contents  [/{userId}/tvdashboard/contents{?rowIds,page,pageSize,language}]
Lists contents filtered by row ids.

+ Parameters
    + userId: `1` (string)
    + rowIds: `for-me` (array) Comma separated row identification strings.
    + page: `2` (number) - (Optional) Returns some page.
    + pageSize: `10` (number) - (Optional) Defines page size from 1-50.
    + language: `en` (string) - (Optional) Defaults to `en`.

### List of contents [GET]

Method returns list of content to display for some row.
Recommendation rank is denoted by order. First presented, first in response. Response 
contains data needed for row view, short description panel view, reference to next and more
detailed call that brings all data needed for details screen, purchase making logic, etc. 
Row is referenced by unique rowTag. Entity IDs are unique for recommendation dashboard 
purpose. Some fields are limited in length. 

Notes on object reconstruction:
- Entities shares common Content type fields that are augmented with Show, Series and VoD child types. 
- Entities types are determined by type field.
- Fields enclosed within Content are always defined others are nullable.
- Image links are hashes that are constructed from templates that are response enclosed.
- externalId is reference for call before content playout, purchase, etc...

+ Response 200 (application/json)
       
        {
            "rows": 
            { "mycontent":
                {
                    "id": "1001",
                    "type": "series",
                    "title": "House of Cards",
                    "description": "A Congressman works with his equally conniving wife to exact revenge on the people who betrayed him.",
                    "poster": "<hash>",
                    "background": "<hash>",
                    "cast": ["Kevin Spacey", "Michel Gill", "Robin Wright"],
                    "directors": ["James Foley", "Robin Wright"],
                    "year": 2016,
                    "countries": ["USA"],
                    "genres": ["Drama", "Crime"],
                    "duration": 3600,
                    "ageRating": 14,
                    "contentRating": {"imdb": 9.0, "user": 9.6},
                    "watched": true,
        
                    "recommendationExplanation": "Because you watched Something",
        
                    "series": {"season": 1, "episode": 1, "lastWatchedSeason": 2},
                    "subTitle": "Chapter 52",
                    "contentKey": "series-1001",
                    
                    "start": 1469544033000,
                    "channelId": 5001,
                    "channelIcon": "<hash>"
                },
                {
                    "id": "1002",
                    "type": "show",
                    "title": "Plastik fantastik",
                    "description": "Odličen slovenski dokumentarec o plastiki z malo drugačnega zornega kota, njenih vplivih na vas in okolje.",
                    "poster": "<hash>",
                    "background": "<hash>",
                    "cast": ["Uroš Robič", "Žiga Čamernik"],
                    "directors": ["Uroš Robič", "Miha Dulmin"],
                    "year": 2013,
                    "countries": ["SI"],
                    "genres": ["Drama"]
                    "duration": 4140,
                    "ageRating": 14,
                    "contentRating": {"imdb": null, "user": 9.6},
                    "watched": true,
                     
                    "recommendationExplanation": "Because you watched something",
        
                    "series": null,
                    "subTitle": null,
                    "contentKey": null,
        
                    "start": 1469544033000,
                    "channelId": 5001,
                    "channelIcon": "<hash>"
                },
                {
                    "id": "1003",
                    "type": "vod",
                    "title": "Deadpool",
                    "description": "A former Special Forces operative turned mercenary is subjected to a rogue experiment that leaves him with accelerated healing powers, adopting the...",
                    "poster": "<hash>",
                    "background": "<hash>",
                    "cast": ["Ryan Reynolds", "Morena Baccarin", "T.J. Miller"],
                    "directors": ["Tim Miller"]
                    "year": 2016,
                    "countries": ["USA"],
                    "genres": ["action", adventure", "comedy"],
                    "duration": 6480,
                    "ageRating": 12,
                    "contentRating": {"imdb": 8.1, "user": 7.2},
                    "watched": false,
                       
                    "recommendationExplanation": null,
        
                    "series": null,
                    "subTitle": null,
                    "contentKey": null,
                     
                    "start": null,
                    "channelId": null,
                    "channelIcon": null
                }
            ],
            "previousPageLink": "/aggie/1/tvdashboard/for-me/contents?language=si&page=1 //updated page parameters from request",
            "nextPageLink": "/aggie/1/tvdashboard/for-me/contents?language=si&page=3 // see above"
        }
        },
        "linkTemplates": {
            "poster": "http://hostnameA/images/{{hash}} //quality is determined by app, absolute URL",
            "background": "http://hostnameB/images/{{hash}} // see above",
            "channelIcon": "http://hostnameC/images/{{hash}} // see above"
        }
        }

+ Response 204 (no/body)
 
+ Response 400 (application/json)

        {
            "error": "userid-does-not-exist",
            "message": "Desired user does not exist."
        } 
        
+ Response 400 (application/json)

        {
            "error": "language-is-unavailable-for-row",
            "message": "Translation is unavailable."
        }   
        
+ Response 400 (application/json)

        {
            "error": "content-id-does-not-exist",
            "message": "Desired content does not exits."
        } 
        
+ Response 400 (application/json)

        {
            "error": "row-does-not-exist",
            "message": "Row does not exits."
        } 
 
## Content actions [/{userId}/tvdashboard/contents/{id}{?language,sibling}]
Actions available for dashboard content. 

+ Parameters
    + userId: `1` (string)
    + id: `2342` (string)
    + sibling: `next|previous` (string) - (Optional) Ignored by default.

### Content actions   [GET]
Method can return next or previous sibling of specified contents id.

+ Response 200 (application/json)

        {
            "id": "1001",
            "actions": [
                {"action": "play", "mrs": []}, 
                {"action": "resume-play", "offset": 3600},
                {"action": "favorite"},
                {"action": "un-favorite"}, 
                {"action": "adopt-recording", "showId": "1234"},
                {"action": "buy", "productIds": ["31534", "56756"]},
                {"action": "details"},
                {"action": "like"},
                {"action": "dislike"}
            ]
        }
    
+ Response 400 (application/json)

        {
            "error": "userid-does-not-exist",
            "message": "Desired user does not exist."
        } 
        
+ Response 400 (application/json)

        {
            "error": "language-is-unavailable-for-content",
            "message": "Translation is unavailable."
        }   
        
+ Response 400 (application/json)

        {
            "error": "content-id-does-not-exist",
            "message": "Desired content does not exits."
        } 
        
+ Response 400 (application/json)

        {
            "error": "row-does-not-exist",
            "message": "Row does not exits."
        } 
        
+ Response 400 (application/json)

        {
            "error": "next-sibling-doesn-not-exist",
            "message": "Desired content has no next sibling."
        }
        
+ Response 400 (application/json)

        {
            "error": "previous-sibling-doesn-not-exist",
            "message": "Desired content has no previous sibling."
        }
        
        
        

## Users properites of an Content [/{userId}/tvdashboard/contents/{id}{?watched}]
Method updates various properties of a Content in users context. Unspecified parameter doesn't
change anything.

+ Parameters
    + userId: `1` (string)
    + rowTag: `for-me` (string)
    + id: `2342` (string)
    + watched: true (boolean) - (Optional)
    
### Update properties of an Content [PUT]
    
+ Response 200 (application/json)

        {
            "success": true,
        }
        
+ Response 400 (application/json)

        {
            "error": "bad-arguments",
            "message": "Some property must be specified and value must be supported."
        }  
 

## Search [/{userId}/tvdashboard/contents/search{?q,page,pageSize,language}]
Search provides slimmed response as much as possible for quick transmission and parsing.
Too short query string returns HTTP 400. Empty query result returns HTTP 204. 

+ Parameters
    + q: `news` (String) - Return results for that includes search results.
    + page: `1` (number) - (Optional) Results for page, 1 based.
    + pageSize: `10` (number) - (Optional) Defines page size from 1-50.
    + language: `en` (string) - (Optional) Defaults to `en`.
    
### Search [GET]

+ Response 200 (application/json)

        {
            "list": [
                {
                    "id": "1001",
                    "type": "series",
                    "title": "House of Cards",
                    "description": "A Congressman works with his equally conniving wife to exact revenge on the people who betrayed him.",
                    "duration": 3600,
                    "ageRating": 14,
                    "contentRating": {"imdb": 9.0, "user": 9.6},
                    "watched": true,
                    "poster": "<hash>",
                    "channelIcon": "<hash>",
                    
                    "series": {"season": 3, "episode": 13, "lastWatchedSeason": 2},
                    "subTitle": "Chapter 52",
                    
                    "start": 1469544033000,
                    "channelId": 5001
                }
            ],
            "previousPageLink": "/aggie/1/tvdashboard/contents/search?language=si&page=1",
            "nextPageLink": "/aggie/1/tvdashboard/contents/search?language=si&page=3",
            "linkTemplates": {
                "poster": "http://hostnameA/images/{{hash}} //quality is determined by app, absolute URL",
                "channelIcon": "http://hostnameC/images/{{hash}} // see above"
            }
        }
        
+ Response 204 (no body)
 

+ Response 400 (application/json)
 

        {
            "error": "query-too-short",
            "message": "q parameter must be longer than 3 characters.",           
        }