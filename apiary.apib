FORMAT: 1A
HOST: http://localhost:3000/aggie/v1/{regionId}/


# TV Dashboard
TV dashboard API provides access to personalized tv content recommendation data. Data provided by
this API is normally presented in form of Rows. Row, Content and Category are main entities at
recommendation dashboard API model. Row/Category provides organization to Contents and is an actual
presentation container of various types as VoD content, TV show, TV series. API is RESTfull by
design, requires low complexity implementation for consumer apps by pre-aggregating results, lower
request count for more capable devices and overall programming convenience. That comes with
price of having user scope methods with quick response times required.


## Method call model
API isn't too chatty because of preloading required to achieve UI snappiness. It's
possible to preload all Rows with single method call for high performance devices. Design assumes
gzip is available everywhere.
####
1. Level: fetch immediate data; when module starts.
 - Rows/Categories: complete hierarchy.
 - Contents: first page for all rows (many or all rows for capable devices).
 - Bitmap images: first page for all rows.
 - Profile data.
2. Level: on demand data fetch: after initial data fetched and UI was generated.
 - Next page results.
 - Content actions with supporting data.
 - Content properties.
 - Next/previous Content in a Row.
 - Search results.


## Users recommendation profile [/{userId}/tvdashboard/profile]
+ Parameters
    + userId: `1` (string)

### Get users recommendation profile [GET]
Returns user configuration specific to TV recommendation dashboard.

+ Response 200 (application/json)

        {
            "recommendationPersonalized": true,
            "isDashboardDefaultScreen": true,
            "recommendationExplanation": true
        }

+ Response 400 (application/json)

        {
            "error": "userid-does-not-exist",
            "message": "Desired user does not exist."
        }


## Change users recommendation profile [/{userId}/tvdashboard/profile{?recommendationPersonalized,isDashboardDefaultScreen,recommendationExplanation}]

+ Parameters
    + userId: `1` (string)
    + recommendationPersonalized: `false` (boolean) - (Optional) Defaults to false. User preference of recommendation based on personal data.
    + isDashboardDefaultScreen: `false` (boolean) - (Optional) Defaults to false. User preference of an TV dashboard beeing default screen on any device.
    + recommendationExplanation: `true` (boolean) - (Optional) Defaults to true. User preference on showing explanations on recommended content selection.

### Change users recommendation profile [PUT]
Unspecified parameter doesn't change anything.

+ Response 200 (application/json)

        {
            "success": true
        }

+ Response 400 (application/json)

        {
            "error": "userid-does-not-exist",
            "message": "Requested user does not exist."
        }

+ Response 400 (application/json)

        {
            "error": "bad-arguments",
            "message": "Bad arguments."
        }

## Recommendation consent message [/{userId}/tvdashboard/consent{?language}]
+ Parameters
    + userId: `1` (string)
    + language: `en` (string) - (Optional) Defaults to `en`.

### Get message for users consent on private recommendation data usage [GET]

+ Response 200 (application/json)

        {
            "message": "Consent text here"
        }

+ Response 400 (application/json)

        {
            "error": "userid-does-not-exist",
            "message": "Requested user does not exist."
        }

+ Response 400 (application/json)

        {
            "error": "bad-arguments",
            "message": "Bad arguments."
        }


## Rows [/{userId}/tvdashboard/rows{?language}]
+ Parameters
    + userId: `1` (string) By omiting this path fragment method returns regional aka. public result.
    + language: `en` (string) - (Optional) Defaults to `en`.

### List all Rows [GET]
Rows are returned completely in single response as data complexity is low and clients are expected
to store them in same manner. Id is unique identifier of Rows/Categories then used for content
fetching. Recommendation rank is denoted by order. First presented first in response. Titles are
translated. NOTE on object reconstruction: 2 entities are delivered here that inherits from same
ancestor Row;
- Basetype Rows is described by id, title and by lack of list property it means that is a leaf.
- Categories (Rows siblings) are also described with color while having list for branches, lack of
 it for leafs.

+ Response 200 (application/json)

        [
            {
              "id": "for-me",
              "title": "For me"
            },
            {
              "id": "my-content",
              "title": "My Content"
            },
            {
              "id": "comedy",
              "title": "Comedy"
            },
            {
              "id": "action",
              "title": "Action"
            },
            {
              "id": "categories",
              "title": "Categories",
              "list": [
                {
                    "id": "popular",
                    "title": "Popular",
                },
                {
                    "id": "scifi",
                    "title": "Sci-Fi",
                    "list": [
                        {
                            "id": "pero-dislikes",
                            "title": "Pero dislikes"
                        },
                        {
                            "id": "pero-dislikes-even-more",
                            "title": "Pero dislikes even more"
                        }
                    ]
                },
                {
                    "id": "cartoons",
                    "title": "Cartoons"
                }
              ]
            }
        ]

+ Response 400 (application/json)

        {
            "error": "userid-does-not-exist",
            "message": "Requested user does not exist."
        }

+ Response 400 (application/json)

        {
            "error": "bad-arguments",
            "message": "Bad arguments."
        }

## Row's list of contents  [/{userId}/tvdashboard/contents{?rowIds,page,pageSize,language}]
Organized list of contents.

+ Parameters
    + userId: `1` (string) By omiting this path fragment method returns regional aka. public result.
    + rowIds: `for-me,action` (array) Comma separated Row/Category identification strings.
    + page: `2` (number) - (Optional) Returns some page.
    + pageSize: `10` (number) - (Optional) Defines page size from 1-50.
    + language: `en` (string) - (Optional) Defaults to `en`.

### List of contents [GET]

Method returns list of content to display for some Row/Category. Recommendation rank is denoted by
order. First presented, first on top. Response contains complete data needed for Row/Category
view construction, description panel view construction and data next calls. Row is referenced
by unique rowId. Entity IDs are unique in context of TV recommendation dashboard.

Notes on object reconstruction:
- Entities shares common Content type fields that are augmented with Show, Series and VoD child types.
- Entities types are determined by type field.
- Fields enclosed within Content are always defined others are empty.
- Image links are hashes that are constructed from templates that are response enclosed.

+ Response 200 (application/json)

        {
            "rows":
            {
                "mycontent":
                    [
                        "id": "SS1001",
                        "type": "series",
                        "title": "House of Cards",
                        "description": "A Congressman works with his equally conniving wife to exact revenge on the people who betrayed him.",
                        "poster": "<hash>",
                        "background": "<hash>",
                        "cast": ["Kevin Spacey", "Michel Gill", "Robin Wright"],
                        "directors": ["James Foley", "Robin Wright"],
                        "year": 2016,
                        "countries": ["USA"],
                        "genres": ["Drama", "Crime"],
                        "duration": 3600,
                        "ageRating": 14,
                        "contentRating": {"imdb": 9.0, "user": 9.6},
                        "watched": true,
                        "recommendationExplanation": "Because you watched Something",
                        "series": {
                            "season": 1,
                            "episode": 1,
                            "lastWatchedSeason": 2,
                            "subTitle": "Chapter 52",
                            "seriesBaseId": "SS1001",
                        },
                        "channel": {"id": "5001", "icon": "<hash>"},
                        "start": 1469544033000,
                        "catchupEnabled": true
                    },
                    {
                        "id": "S1002",
                        "type": "show",
                        "title": "Plastik fantastik",
                        "description": "Odličen slovenski dokumentarec o plastiki z malo drugačnega zornega kota, njenih vplivih na vas in okolje.",
                        "poster": "<hash>",
                        "background": "<hash>",
                        "cast": ["Uroš Robič", "Žiga Čamernik"],
                        "directors": ["Uroš Robič", "Miha Dulmin"],
                        "year": 2013,
                        "countries": ["SI"],
                        "genres": ["Drama"]
                        "duration": 4140,
                        "ageRating": 14,
                        "contentRating": {"imdb": 0, "user": 9.6},
                        "watched": true,
                        "recommendationExplanation": "Because you watched something",
                        "series": {},
                        "channel": {"id": "5001", "icon": "<hash>"},
                        "start": 1469544033000,
                        "catchupEnabled": true
                    },
                    {
                        "id": "V1003",
                        "type": "vod",
                        "title": "Deadpool",
                        "description": "A former Special Forces operative turned mercenary is subjected to a rogue experiment that leaves him with accelerated healing powers, adopting the...",
                        "poster": "<hash>",
                        "background": "<hash>",
                        "cast": ["Ryan Reynolds", "Morena Baccarin", "T.J. Miller"],
                        "directors": ["Tim Miller"]
                        "year": 2016,
                        "countries": ["USA"],
                        "genres": ["Action", "Adventure", "Comedy"],
                        "duration": 6480,
                        "ageRating": 12,
                        "contentRating": {"imdb": 8.1, "user": 7.2},
                        "watched": false,
                        "recommendationExplanation": "",
                        "series": {},
                        "channel": {},
                        "start": 0,
                        "catchupEnabled": false
                    }
                    ],
                    "previousPageLink": "/v1/aggie/1/tvdashboard/for-me/contents?language=si&page=1
                     //updated page parameters from request",
                    "nextPageLink": "/v1/aggie/1/tvdashboard/for-me/contents?language=si&page=3 // see above"
                }
            },
            "linkTemplates": {
                "poster": "http://hostnameA/images/{{hash}} //quality is determined by app, absolute URL",
                "background": "http://hostnameB/images/{{hash}} // see above",
                "channelIcon": "http://hostnameC/images/{{hash}} // see above"
            }
        }

+ Response 204 (no/body)

+ Response 400 (application/json)

        {
            "error": "userid-does-not-exist",
            "message": "Requested user does not exist."
        }

+ Response 400 (application/json)

        {
            "error": "language-is-unavailable-for-row",
            "message": "Translation not available."
        }

+ Response 400 (application/json)

        {
            "error": "content-id-does-not-exist",
            "message": "Desired content does not exits."
        }

+ Response 400 (application/json)

        {
            "error": "bad-arguments",
            "message": "Bad arguments."
        }


## Content actions [/{userId}/tvdashboard/contents/{id}/actions{?language}]
Actions available for dashboard content.

+ Parameters
    + userId: `1` (string)
    + id: `S2342` (string)

### Content actions   [GET]
Method returns available actions for some content.

+ Response 200 (application/json)

        {
            "id": "SS1001",
            "actions": [
                {"action": "play", "mrs": []},
                {"action": "resume-play", "offset": 3600},
                {"action": "favorite"},
                {"action": "unfavorite"},
                {"action": "adopt-recording", "showId": "1234"},
                {"action": "buy", "resource":
                    "/v1/aggie/2/1/tvdashboard/contents/SS1001/purchase-products"},
                {"action": "details"},
                {"action": "like"},
                {"action": "dislike"}
            ]
        }

+ Response 400 (application/json)

        {
            "error": "userid-does-not-exist",
            "message": "Requested user does not exist."
        }

+ Response 400 (application/json)

        {
            "error": "language-is-unavailable-for-row",
            "message": "Translation not available."
        }

+ Response 400 (application/json)

        {
            "error": "content-id-does-not-exist",
            "message": "Requested content does not exits."
        }

+ Response 400 (application/json)

        {
            "error": "bad-arguments",
            "message": "Bad arguments."
        }


## Users properties of an Content [/{userId}/tvdashboard/contents/{id}/properties{?watched,favorite,like}]
Method updates various properties of a Content in users context. Unspecified parameter doesn't
change anything.

+ Parameters
    + userId: `1` (string)
    + id: `V2342` (string)
    + watched: true (boolean) - (Optional)
    + favorite: false (boolean) - (Optional)
    + like: true (boolean|null) - (Optional) Null value resets like state to as if was never set.

### Update properties of an Content [PUT]

+ Response 200 (application/json)

        {
            "success": true,
        }

+ Response 400 (application/json)

        {
            "error": "bad-arguments",
            "message": "Bad arguments."
        }



## Search [/{userId}/tvdashboard/contents/search{?q,page,pageSize,language}]
Search provides slimmed response as much as possible for quick transmission and parsing.
Too short query string returns HTTP 400. Empty query result returns HTTP 204.

+ Parameters
    + q: `news` (String) - Return results for that includes search results.
    + page: `1` (number) - (Optional) Results for page, 1 based.
    + pageSize: `10` (number) - (Optional) Defines page size from 1-50.
    + language: `en` (string) - (Optional) Defaults to `en`.

### Search [GET]

+ Response 200 (application/json)

        {
            "list": [
                {
                    "id": "SS1001",
                    "type": "series",
                    "title": "House of Cards",
                    "description": "A Congressman works with his equally conniving wife to exact revenge on the people who betrayed him.",
                    "duration": 3600,
                    "ageRating": 14,
                    "contentRating": {"imdb": 9.0, "user": 9.6},
                    "watched": true,
                    "poster": "<hash>",
                    "series": {
                        "season": 3,
                        "episode": 13,
                        "lastWatchedSeason": 2,
                        "subTitle": "Chapter 52",
                        "seriesBaseId": "SS1001",
                    },
                    "channel": {"id": "5001", "icon": "<hash>"},
                    "start": 1469544033000,
                }
            ],
            "previousPageLink": "/aggie/1/tvdashboard/contents/search?language=si&page=1",
            "nextPageLink": "/aggie/1/tvdashboard/contents/search?language=si&page=3",
            "linkTemplates": {
                "poster": "http://hostnameA/images/{{hash}} //quality is determined by app, absolute URL",
                "channelIcon": "http://hostnameC/images/{{hash}} // see above"
            }
        }

+ Response 204 (no body)


+ Response 400 (application/json)

        {
            "error": "query-too-short",
            "message": "q parameter must be longer than 3 characters.",
        }